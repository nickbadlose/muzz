// Code generated by mockery v2.43.2. DO NOT EDIT.

package mockauth

import (
	context "context"

	muzz "github.com/nickbadlose/muzz"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function with given fields: ctx, email, password
func (_m *Repository) Authenticate(ctx context.Context, email string, password string) (*muzz.User, error) {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 *muzz.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*muzz.User, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *muzz.User); ok {
		r0 = rf(ctx, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*muzz.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type Repository_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - password string
func (_e *Repository_Expecter) Authenticate(ctx interface{}, email interface{}, password interface{}) *Repository_Authenticate_Call {
	return &Repository_Authenticate_Call{Call: _e.mock.On("Authenticate", ctx, email, password)}
}

func (_c *Repository_Authenticate_Call) Run(run func(ctx context.Context, email string, password string)) *Repository_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Repository_Authenticate_Call) Return(_a0 *muzz.User, _a1 error) *Repository_Authenticate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_Authenticate_Call) RunAndReturn(run func(context.Context, string, string) (*muzz.User, error)) *Repository_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
