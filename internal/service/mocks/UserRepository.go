// Code generated by mockery v2.43.2. DO NOT EDIT.

package mockservice

import (
	context "context"

	muzz "github.com/nickbadlose/muzz"
	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

type UserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepository) EXPECT() *UserRepository_Expecter {
	return &UserRepository_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: _a0, _a1
func (_m *UserRepository) CreateUser(_a0 context.Context, _a1 *muzz.CreateUserInput) (*muzz.User, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *muzz.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *muzz.CreateUserInput) (*muzz.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *muzz.CreateUserInput) *muzz.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*muzz.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *muzz.CreateUserInput) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserRepository_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *muzz.CreateUserInput
func (_e *UserRepository_Expecter) CreateUser(_a0 interface{}, _a1 interface{}) *UserRepository_CreateUser_Call {
	return &UserRepository_CreateUser_Call{Call: _e.mock.On("CreateUser", _a0, _a1)}
}

func (_c *UserRepository_CreateUser_Call) Run(run func(_a0 context.Context, _a1 *muzz.CreateUserInput)) *UserRepository_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*muzz.CreateUserInput))
	})
	return _c
}

func (_c *UserRepository_CreateUser_Call) Return(_a0 *muzz.User, _a1 error) *UserRepository_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_CreateUser_Call) RunAndReturn(run func(context.Context, *muzz.CreateUserInput) (*muzz.User, error)) *UserRepository_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function with given fields: _a0, _a1
func (_m *UserRepository) GetUsers(_a0 context.Context, _a1 *muzz.GetUsersInput) ([]*muzz.UserDetails, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []*muzz.UserDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *muzz.GetUsersInput) ([]*muzz.UserDetails, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *muzz.GetUsersInput) []*muzz.UserDetails); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*muzz.UserDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *muzz.GetUsersInput) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type UserRepository_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *muzz.GetUsersInput
func (_e *UserRepository_Expecter) GetUsers(_a0 interface{}, _a1 interface{}) *UserRepository_GetUsers_Call {
	return &UserRepository_GetUsers_Call{Call: _e.mock.On("GetUsers", _a0, _a1)}
}

func (_c *UserRepository_GetUsers_Call) Run(run func(_a0 context.Context, _a1 *muzz.GetUsersInput)) *UserRepository_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*muzz.GetUsersInput))
	})
	return _c
}

func (_c *UserRepository_GetUsers_Call) Return(_a0 []*muzz.UserDetails, _a1 error) *UserRepository_GetUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_GetUsers_Call) RunAndReturn(run func(context.Context, *muzz.GetUsersInput) ([]*muzz.UserDetails, error)) *UserRepository_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
