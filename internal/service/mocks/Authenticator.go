// Code generated by mockery v2.43.2. DO NOT EDIT.

package mockservice

import (
	context "context"

	apperror "github.com/nickbadlose/muzz/internal/apperror"

	mock "github.com/stretchr/testify/mock"

	muzz "github.com/nickbadlose/muzz"
)

// Authenticator is an autogenerated mock type for the Authenticator type
type Authenticator struct {
	mock.Mock
}

type Authenticator_Expecter struct {
	mock *mock.Mock
}

func (_m *Authenticator) EXPECT() *Authenticator_Expecter {
	return &Authenticator_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function with given fields: ctx, email, password
func (_m *Authenticator) Authenticate(ctx context.Context, email string, password string) (string, *muzz.User, *apperror.Error) {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 string
	var r1 *muzz.User
	var r2 *apperror.Error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, *muzz.User, *apperror.Error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) *muzz.User); ok {
		r1 = rf(ctx, email, password)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*muzz.User)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) *apperror.Error); ok {
		r2 = rf(ctx, email, password)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*apperror.Error)
		}
	}

	return r0, r1, r2
}

// Authenticator_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type Authenticator_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - password string
func (_e *Authenticator_Expecter) Authenticate(ctx interface{}, email interface{}, password interface{}) *Authenticator_Authenticate_Call {
	return &Authenticator_Authenticate_Call{Call: _e.mock.On("Authenticate", ctx, email, password)}
}

func (_c *Authenticator_Authenticate_Call) Run(run func(ctx context.Context, email string, password string)) *Authenticator_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Authenticator_Authenticate_Call) Return(token string, user *muzz.User, err *apperror.Error) *Authenticator_Authenticate_Call {
	_c.Call.Return(token, user, err)
	return _c
}

func (_c *Authenticator_Authenticate_Call) RunAndReturn(run func(context.Context, string, string) (string, *muzz.User, *apperror.Error)) *Authenticator_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthenticator creates a new instance of Authenticator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthenticator(t interface {
	mock.TestingT
	Cleanup(func())
}) *Authenticator {
	mock := &Authenticator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
